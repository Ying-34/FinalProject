package ictgradschool.project.util;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;


public class UserDAO {

    static boolean insertUserGenerateNewUserID(User user, Connection conn) throws SQLException {
        try (PreparedStatement statement = conn.prepareStatement("INSERT INTO bloggingDB_userLogin(username,hashcode,salt,firstName,lastName,dateOfBirth,selfIntroduction,avatarImage) VALUES (?,?,?,?,?,?,?,?)", Statement.RETURN_GENERATED_KEYS)) {
            statement.setString(1, user.getUserName());
            statement.setString(2, user.getHashCode());
            statement.setString(3, user.getSalt());
            statement.setString(4, user.getfName());
            statement.setString(5, user.getlName());
            statement.setString(6, user.getDateOfBirth());
            statement.setString(7, user.getBio());
            statement.setString(8, user.getProfileImage());

            int rowsAffected = statement.executeUpdate();

            if (rowsAffected == 0) {
                return false;
            }

            // This code will allow us to get the primary keys that were generated by the database. These will be returned
            // in a ResultSet with one column. Each row will correspond to one generated key (in case we inserted multiple
            // rows at once). In this case, there will be only one row since we only inserted one user.
            try (ResultSet keys = statement.getGeneratedKeys()) {
                keys.next(); // Move to the fist row.
                int userID = keys.getInt(1);
                user.setId(userID); // Set the user's primary key eg ID to the one generated by the DB.

                return true;
            }
        }
    }


    public static User getUser(String username, Connection connection) {
        try (PreparedStatement statement = connection.prepareStatement("SELECT * FROM bloggingDB_userLogin WHERE username = ?")) {
            statement.setString(1, username);

            try (ResultSet res = statement.executeQuery()) {
                if (res.next()) {
                    User user = createUserFromResultsSet(res);
                    return user;
                }

            }
        } catch (SQLException e) {
            System.out.println("Something is wrong with the Connection in getUser function DAO");
            e.printStackTrace();

        }
        return null;
    }


    //This method will delete a user from the SQL database with a given userId
    public static boolean deleteUser(int userId, Connection conn) throws SQLException {

        try (PreparedStatement statement = conn.prepareStatement(
                "DELETE FROM bloggingDB_userLogin WHERE id = ?")) {
            statement.setInt(1, userId);

            int rowsAffected = statement.executeUpdate();
            return (rowsAffected == 1);
        }
    }

    //Returns all users from the database
    public static List<User> getAllUsers(Connection connection) throws SQLException {
        List<User> userList = new ArrayList<>();

        try (Statement statement = connection.createStatement()) {

            try (ResultSet res = statement.executeQuery("SELECT * FROM bloggingDB_userLogin")) {

                while (res.next()) {
                    User user = createUserFromResultsSet(res);
                    userList.add(user);
                }

            }
        }
        return userList;
    }

    //Used with the edit user details Note that you should also change username in the Articles and Comments DOA's aswell.
    public static boolean updateExistingUser(User user, Connection connection) throws SQLException {

        try (PreparedStatement statement = connection.prepareStatement(
                "UPDATE bloggingDB_userLogin SET firstName = ?, lastName = ?, username = ?, selfIntroduction=?,avatarImage=? WHERE id = ?"
        )) {
            statement.setString(1, user.getfName());
            statement.setString(2, user.getlName());
            statement.setString(3, user.getUserName());
            statement.setString(4, user.getBio());
            statement.setString(5, user.getProfileImage());
            statement.setInt(6, user.getId());

            int rowsAffected = statement.executeUpdate();
            return (rowsAffected == 1);
        }
    }


    private static User createUserFromResultsSet(ResultSet resultSet) throws SQLException {
        User user = new User(
                resultSet.getInt(1),
                resultSet.getString(5),
                resultSet.getString(6),
                resultSet.getString(2),
                resultSet.getString(3),
                resultSet.getString(4),
                resultSet.getString(7),
                resultSet.getString(9),
                resultSet.getString(8)
        );
        return user;
    }
}





